// Unlike normal java programs, this has no package

import java.util.ArrayList;
import java.util.Arrays;
import  java.util.Comparator;

/**
Euler task Twelve

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
first ten terms would be:

 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

 Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28

 We can see that 28 is the first triangle number to have over five divisors.

 What is the value of the first triangle number to have over five hundred divisors?

 */



public class Twelve {

    public static void main(String[] args) {

        //math shows that a number with 500 divisors would have to be at least 251^2
        // triangles number N = N*(N+1)/2
        // solving those, the first candidate triangle is 350

        // first, check my math on that 251^2 thing:
        ArrayList<Integer> factors = new ArrayList<>(502);
        int candidate = 349*350/2;
        if (candidate > 251*251)
            throw new RuntimeException("I cant even multiply right");
        int leastFactor=1;
        int greatestFactor = candidate;
        while (true) {
            factors.add(leastFactor);
            factors.add(greatestFactor);
            leastFactor += 1;
            greatestFactor = candidate/leastFactor;
            if (greatestFactor-leastFactor+1 // most potential factors left (all the numbers from least to greatest inclusive
                < 501-factors.size() ) // number of factors we still need to find
                break;
            if (greatestFactor<leastFactor)
                throw new RuntimeException("my math was wrong");
        }
        // yep, ran out of possibilities around 207

        long start = System.currentTimeMillis();

        // now continue looking for a triangle that fits
        int triangleIndex = 350;
        while(true) {
            factors.clear();
            candidate += triangleIndex;
            leastFactor = 1;
            greatestFactor = candidate;
            while(true) {
                int remainder = candidate % leastFactor;// also just for debugging
                if (candidate % leastFactor == 0) {
                    factors.add(leastFactor);   // to get the answer I dont need to store these, merely count them
                    if (greatestFactor!=leastFactor)
                        factors.add(greatestFactor);// but its good for debugging to have them handy
                }
                leastFactor += 1;
                greatestFactor = candidate/leastFactor;
                if (greatestFactor-leastFactor+1
                    < 501-factors.size() )
                break;
                // here, once I found 501 factors, I could stop.  I failed to do so.
                if (greatestFactor<leastFactor)
                    break;
            }
            if (factors.size()>500)
                break;
            triangleIndex++;
        }
        long end = System.currentTimeMillis();
        System.out.println(String.format("with wheel took %f seconds",(end-start)/1000.0));

        System.out.println(String.valueOf(triangleIndex));
        System.out.println(String.valueOf(candidate));
    }
}
